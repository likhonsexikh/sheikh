name: Release Sheikh LLM

# Trigger this workflow on version tags (vX.Y.Z)
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  release:
    name: Build and Release Sheikh LLM
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Build the runtime
      - name: Build Sheikh runtime
        run: |
          cd runtime && make clean && make
        shell: bash

      # Step 3: Verify model presence
      - name: Verify model binary
        run: |
          if [ ! -f "model/sheikh.gguf" ]; then
            echo "Model binary file not found at model/sheikh.gguf"
            exit 1
          fi

      # Step 4: Package the release artifacts
      - name: Package artifacts
        run: |
          mkdir release
          cp model/sheikh.gguf release/
          cp runtime/sheikh release/
          cp -R sdk/python release/python-sdk
          cp -R sdk/node release/node-sdk
          zip -r release/sheikh-v${{ github.ref_name }}.zip release/

      # Step 5: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Sheikh LLM ${{ github.ref_name }}
          body: |
            ## Sheikh LLM Release Notes

            - **Sliding-Window Reasoning** support.
            - Optimized for low-power edge devices.
            - SDKs for both Python and Node.js included.
            - Lightweight <300MB model included.

          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Upload release assets to GitHub Release
      - name: Upload release assets
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/sheikh-v${{ github.ref_name }}.zip
          asset_name: sheikh-v${{ github.ref_name }}.zip
          asset_content_type: application/zip

      # Step 7 (Optional): Publish Python SDK to PyPI
      - name: Publish Python SDK to PyPI
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'v')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          cd sdk/python
          pip install build twine
          python -m build
          twine upload dist/*

      # Step 8 (Optional): Publish Node SDK to NPM
      - name: Publish Node SDK to NPM
        if: github.ref_name == 'main' || startsWith(github.ref_name, 'v')
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          cd sdk/node
          npm version ${{ github.ref_name }}
          npm publish
